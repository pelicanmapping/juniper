#pragma once

#include <osgJuniper/Point>
#include <osg/Geometry>
#include <osg/Geode>
#include <osg/MatrixTransform>
#include <osg/PrimitiveSetIndirect>
#include <osg/BufferIndexBinding>


namespace osgJuniper
{
    struct Block
    {
        Block(unsigned int _index, unsigned int _count, osg::Geometry* _geom):
            index(_index),
            count(_count),
            geometry(_geom)
        {
        }

        unsigned int index;
        unsigned int count;
        osg::Geometry* geometry;
    };
    typedef std::vector<Block> BlockList;

    class PointManager;

    class PointChunk : public osg::Node
    {
    public:
        PointChunk();
        osg::BoundingSphere computeBound() const;

        void traverse(osg::NodeVisitor& nv);
        PointList points;
        std::vector<osg::DrawArraysIndirectCommand> commands;
        PointManager* manager;
        BlockList blocks;
    };

    typedef std::vector< osg::ref_ptr< PointChunk > > PointChunkList;

    struct TraversedChunks : public osg::Referenced
    {
        PointChunkList chunks;
    };

    class PointGeometry : public osg::Geometry
    {
    public:
        PointGeometry(unsigned int initialSize);

        osg::DefaultIndirectCommandDrawArrays* _commands;
        osg::Vec3Array* _verts;
        osg::Vec4Array* _colors;
        osg::Vec4Array* _data;
        unsigned int _initialSize;
    };


    class PointManager : public osg::Group
    {
    public:
        PointManager();

        virtual void traverse(osg::NodeVisitor& nv);

        void addPoints(PointChunk* chunk);

        const osg::Vec3d& getAnchor();
        void setAnchor(const osg::Vec3d& anchor);

    private:

        void addPointGeometry();
        void addPointsInternal(PointChunk* chunk);
        PointChunkList _chunks;
        PointChunkList _chunksToAdd;
        OpenThreads::Mutex _mutex;
        osg::Vec3d _anchor;
        osg::MatrixTransform* _transform;

        std::vector< osg::ref_ptr< PointGeometry > > _geometries;

        BlockList _freeBlocks;
    };
}
