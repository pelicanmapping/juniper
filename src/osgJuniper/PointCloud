/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2011 Pelican Ventures, Inc.
* http://wush.net/trac/juniper
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGJUNIPER_POINTCLOUD
#define OSGJUNIPER_POINTCLOUD 1

#include "Common"
#include <osg/Group>
#include <osg/OperationThread>

#include <osg/Point>

namespace osgJuniper
{

    class OSGJUNIPER_EXPORT PointCloud : public osg::Group
    {
    public:
        PointCloud();
        PointCloud(const PointCloud& rhs, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);
        //META_Node(osgJuniper, PointCloud);
    protected:

        osg::ref_ptr<osg::OperationThread> _operationThread;
    };


    class OSGJUNIPER_EXPORT PointCloudDecorator : public osg::Group
    {
    public:
        PointCloudDecorator();

        float getPointSize() const;
        void setPointSize(float pointSize);       

        float getMinPointSize() const;
        void setMinPointSize(float minPointSize);

        float getMaxPointSize() const;
        void setMaxPointSize(float maxPointSize);

        float getMaxPointDistance() const;
        void setMaxPointDistance(float distance);

        float getMinHeight() const;
        void setMinHeight(float minHeight);
        
        unsigned int getMaxReturn() const;
        void setMaxReturn(unsigned int maxReturn);

        unsigned short getMinIntensity() const;
        void setMinIntensity(unsigned short minIntensity);
        
        unsigned short getMaxIntensity() const;
        void setMaxIntensity(unsigned short maxIntensity);

        enum ColorMode
        {
            RGB = 0,
            Intensity = 1,
            Classification = 2,
            Height = 3
        };

        ColorMode getColorMode() const;
        void setColorMode(ColorMode colorMode);

        bool getClassificationVisible(unsigned int classification) const;
        void setClassificationVisible(unsigned int classification, bool enabled);

        bool getAutoPointSize() const;
        void setAutoPointSize(bool autoPointSize);

    private:

        float _pointSize;
        float _minPointSize;
        float _maxPointSize;
        float _maxPointDistance;      
        float _minHeight;

        unsigned int _maxReturn;

        unsigned short _minIntensity;
        unsigned short _maxIntensity;
        bool _autoPointSize;
        


        ColorMode _colorMode;

        // Uniforms
        osg::Uniform* _classificationFilter;

    };

} // namespace osgJuniper

#endif // OSGJUNIPER_KTREE


