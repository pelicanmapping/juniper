/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2017 Pelican Mapping
* Pelican Mapping CONFIDENTIAL
* Copyright (c) 2010-2017 [Pelican Mapping], All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains the property of Pelican Mapping. The intellectual and technical concepts contained
* herein are proprietary to Pelican Mapping and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
* from Pelican Mapping.  Access to the source code contained herein is hereby forbidden to anyone except current Pelican Mapping employees, managers or contractors who have executed
* Confidentiality and Non-disclosure agreements explicitly covering such access.
*
* The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
* information that is confidential and/or proprietary, and is a trade secret, of Pelican Mapping.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
* OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF PELICAN MAPPING IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
* LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
* TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
*/
#ifndef OSGJUNIPER_POINTCLOUD
#define OSGJUNIPER_POINTCLOUD 1

#include "Common"
#include <osg/Group>
#include <osg/OperationThread>

#include <osg/Point>
#include <osg/Texture2D>

namespace osgJuniper
{

    class OSGJUNIPER_EXPORT PointCloud : public osg::Group
    {
    public:
        PointCloud();
        PointCloud(const PointCloud& rhs, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);
        //META_Node(osgJuniper, PointCloud);
    protected:

        osg::ref_ptr<osg::OperationThread> _operationThread;
    };


    class OSGJUNIPER_EXPORT PointCloudDecorator : public osg::Group
    {
    public:
        PointCloudDecorator();

        float getPointSize() const;
        void setPointSize(float pointSize);       

        float getMinPointSize() const;
        void setMinPointSize(float minPointSize);

        float getMaxPointSize() const;
        void setMaxPointSize(float maxPointSize);

        float getMaxPointDistance() const;
        void setMaxPointDistance(float distance);

        float getMinHeight() const;
        void setMinHeight(float minHeight);

        float getMaxHeight() const;
        void setMaxHeight(float maxHeight);
        
        unsigned int getMaxReturn() const;
        void setMaxReturn(unsigned int maxReturn);

        unsigned short getMinIntensity() const;
        void setMinIntensity(unsigned short minIntensity);
        
        unsigned short getMaxIntensity() const;
        void setMaxIntensity(unsigned short maxIntensity);

        float getHazeDistance() const;
        void setHazeDistance(float hazeDistance);


        enum ColorMode
        {
            RGB = 0,
            Intensity = 1,
            Classification = 2,
            Height = 3,
            Ramp = 4
        };

        ColorMode getColorMode() const;
        void setColorMode(ColorMode colorMode);

        bool getClassificationVisible(unsigned int classification) const;
        void setClassificationVisible(unsigned int classification, bool enabled);

        bool getAutoPointSize() const;
        void setAutoPointSize(bool autoPointSize);

        osg::Texture2D* getColorRamp();
        void setColorRamp( osg::Texture2D* colorRamp );

    private:

        float _pointSize;
        float _minPointSize;
        float _maxPointSize;
        float _maxPointDistance;      
        float _minHeight;
        float _maxHeight;
        float _hazeDistance;

        unsigned int _maxReturn;

        unsigned short _minIntensity;
        unsigned short _maxIntensity;
        bool _autoPointSize;
        

        ColorMode _colorMode;

        // Uniforms
        osg::Uniform* _classificationFilter;

    };

} // namespace osgJuniper

#endif // OSGJUNIPER_KTREE


