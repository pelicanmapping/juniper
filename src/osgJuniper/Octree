/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2017 Pelican Mapping
* Pelican Mapping CONFIDENTIAL
* Copyright (c) 2010-2017 [Pelican Mapping], All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains the property of Pelican Mapping. The intellectual and technical concepts contained
* herein are proprietary to Pelican Mapping and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
* from Pelican Mapping.  Access to the source code contained herein is hereby forbidden to anyone except current Pelican Mapping employees, managers or contractors who have executed
* Confidentiality and Non-disclosure agreements explicitly covering such access.
*
* The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
* information that is confidential and/or proprietary, and is a trade secret, of Pelican Mapping.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
* OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF PELICAN MAPPING IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
* LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
* TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
*/
#ifndef OSGJUNIPER_OCTREE
#define OSGJUNIPER_OCTREE 1

#include <osgJuniper/Common>
#include <osgJuniper/Point>

#include <osg/Referenced>
#include <osg/ref_ptr>
#include <osg/Vec3>
#include <osg/Vec4>
#include <osg/BoundingBox>

// You have to include osgEarth/Bounds here or otherwise you get a multiply defined symbols for BoundingBoxImpl<osg::Vec3d>
// My best theory as to why this happens are that templates are evil.
#include <osgEarth/Bounds>

#include <vector>
#include <list>

namespace osgJuniper
{
    /**
     * A unique id for a cell in an Octree
     */
    class OSGJUNIPER_EXPORT OctreeId
    {
    public:
        OctreeId();         
        OctreeId(int in_level, int in_x, int in_y, int in_z);

        bool operator == (const OctreeId& rhs) const        
        {
            return (level==rhs.level) && (x==rhs.x) && (y==rhs.y) && (z==rhs.z);
        }

        bool operator != (const OctreeId& rhs) const        
        {
            return (level!=rhs.level) || (x!=rhs.x) || (y!=rhs.y) || (z!=rhs.z);
        }

        bool operator < (const OctreeId& rhs) const
        {
            if (level<rhs.level) return true;
            if (level>rhs.level) return false;
            if (x<rhs.x) return true;
            if (x>rhs.x) return false;
            if (y<rhs.y) return true;
            if (y>rhs.y) return false;
            return z<rhs.z;
        }

        bool valid() const { return level>=0; }

        int level;   
        int x;
        int y;
        int z;
    };

    class OctreeNodeVisitor;


    /**
     * A node in the Octree.  Stores points.
     */
    class OSGJUNIPER_EXPORT OctreeNode : public osg::Referenced
    {
    public:
        OctreeNode();

        /**
         *Sets the OctreeId for this OctreeNode
         */
        void setId(const OctreeId& id);
        /**
         * Gets the OctreeId for this OctreeNode
         */
        const OctreeId& getID() const { return _id;}        

        /**
         * Gets the parent id for this OctreeNode
         */
        OctreeId getParentID() const;

        /**
         * Gets the BoundingBox for this OctreeNode
         */
        const osg::BoundingBoxd& getBoundingBox() const;
        osg::BoundingBoxd& getBoundingBox();

        /**
         *Sets the BoundingBox for this OctreeNode
         */
        void setBoundingBox(const osg::BoundingBoxd& boundingBox);        

        /**
        *Split this OctreeNode into it's 8 children
        */
        void split();
        
        /**
        *Gets whether this OctreeNode has been split
        */
        bool isSplit() const;    

        /**
        *Gets whether this OctreeNode is a leaf node
        */
        bool isLeaf() const;

        /**
        *Gets the list of points in this OctreeNode
        */
        const PointList& getPoints() const;
        PointList& getPoints();

        typedef std::vector< osg::ref_ptr< OctreeNode > > OctreeNodeList;

        /**
         *Gets the children of this OctreeNode
         */
        const OctreeNodeList getChildren() const { return _children; }


        void accept(OctreeNodeVisitor &v);
        void traverse(OctreeNodeVisitor& v);

        /**
         * Creates the given child of the OctreeNode
         */
        OctreeNode* createChild(unsigned int childNumber);

        /**
         * Creates an octree node with the given id.  Assumes this is the root node.
         */
        OctreeNode* createChild(const OctreeId& id);

        double getWidth() const;
        double getHeight() const;
        double getDepth() const;

        OctreeId getID(const osg::Vec3d& point, unsigned int level) const;        
               

    protected:       

        PointList _points;
        OctreeId _id;
        
        OctreeNodeList _children;
        osg::BoundingBoxd _boundingBox;
        bool _split;
    };

    /**
     * Visitor that traverses down the Octree.
     */
    class OSGJUNIPER_EXPORT OctreeNodeVisitor
    {
    public:
        OctreeNodeVisitor();
        virtual void apply(OctreeNode& node);
        void traverse(OctreeNode& node);
    };

    /**
     * NodeVisitor that counts all the points in the Octree.
     */
    class OSGJUNIPER_EXPORT CountPointsVisitor : public OctreeNodeVisitor
    {
    public:
        CountPointsVisitor();
        virtual void apply(OctreeNode& node);
        unsigned int _numPoints;        
    };

    /**
     * A NodeVisitor that adds a point to the given Octree
     */
    class OSGJUNIPER_EXPORT AddPointVisitor : public OctreeNodeVisitor
    {
    public:
        enum Strategy
        {
            //Always accept the point
            ACCEPT,
            //Reject the point if it needs to go past the maximum level
            REJECT
        };

        AddPointVisitor(const Point& point, unsigned int maxLevel);

        /**
         *Sets the strategy for the visitor.
         */
        void setStrategy(Strategy strategy);
        /**
         * Gets the strategy for the visitor.
         */
        Strategy getStrategy() const { return _strategy;}

        /**
         *Sets the maximum level that this visitor should traverse to.
         */
        void setMaxLevel(unsigned int maxLevel);
        /**
         * Gets the maximum level that this node should traverse to.
         */
        unsigned int getMaxLevel() const { return _maxLevel; }

        /**
         *Gets the point that is to be added.
         */
        const Point& getPoint() const { return _point;}

        virtual void apply(OctreeNode& node);

        /**
         * Gets whether or not the point was added after a call to accept.
         */
        bool getPointAdded() const { return _pointAdded;}

    protected:
        Point _point;
        Strategy _strategy;
        unsigned int _maxLevel;
        bool _pointAdded;
    };

    /**
     * Collects all the points in the Octree
     */
    class OSGJUNIPER_EXPORT CollectPointsVisitor : public OctreeNodeVisitor
    {
    public:
        CollectPointsVisitor();

        /**
         * Get whether or not to remove the point from the Octree when it is added to the visitor.
         */
        bool getRemove() const;

        /**
         * Set whether or not to remove the point from the Octree when it is added to the visitor.
         */
        void setRemove(bool remove);

        virtual void apply(OctreeNode& node);

        /**
         * Gets the list of points that were collected.
         */
        PointList& getPoints();
        const PointList& getPoints() const;

    protected:
        bool _remove;
        PointList _points;
    };

    /**
     * Choose representative points for the Node based on points that are contained in the leaves.
     */
    class OSGJUNIPER_EXPORT ChooseRepresentativePointVisitor : public OctreeNodeVisitor
    {
    public:
        ChooseRepresentativePointVisitor();
        virtual void apply(OctreeNode& node);   

        PointList _points;
        bool _valid;
    };

    /**
     * Visitor used to collect representative points from leaf nodes and apply them to their parent nodes.
     */
    class OSGJUNIPER_EXPORT ApplyRepresentativePointVisitor : public OctreeNodeVisitor
    {
    public:
        ApplyRepresentativePointVisitor();
        virtual void apply(OctreeNode& node);
    };


}

#endif