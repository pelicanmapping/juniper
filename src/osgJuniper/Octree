/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2017 Pelican Mapping
* Pelican Mapping CONFIDENTIAL
* Copyright (c) 2010-2017 [Pelican Mapping], All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains the property of Pelican Mapping. The intellectual and technical concepts contained
* herein are proprietary to Pelican Mapping and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
* from Pelican Mapping.  Access to the source code contained herein is hereby forbidden to anyone except current Pelican Mapping employees, managers or contractors who have executed
* Confidentiality and Non-disclosure agreements explicitly covering such access.
*
* The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
* information that is confidential and/or proprietary, and is a trade secret, of Pelican Mapping.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
* OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF PELICAN MAPPING IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
* LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
* TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
*/
#ifndef OSGJUNIPER_OCTREE
#define OSGJUNIPER_OCTREE 1

#include <osgJuniper/Common>
#include <osgJuniper/Point>
#include <osgJuniper/OctreeId>

#include <osg/Referenced>
#include <osg/ref_ptr>
#include <osg/Vec3>
#include <osg/Vec4>
#include <osg/BoundingBox>

// You have to include osgEarth/Bounds here or otherwise you get a multiply defined symbols for BoundingBoxImpl<osg::Vec3d>
// My best theory as to why this happens are that templates are evil.
#include <osgEarth/Bounds>

#include <vector>
#include <list>

namespace osgJuniper
{   
    /**
     * A node in the Octree.  Stores points.
     */
    class OSGJUNIPER_EXPORT OctreeNode : public osg::Referenced
    {
    public:
        OctreeNode();

        /**
         *Sets the OctreeId for this OctreeNode
         */
        void setId(const OctreeId& id);
        /**
         * Gets the OctreeId for this OctreeNode
         */
        const OctreeId& getID() const { return _id;}        

        /**
         * Gets the parent id for this OctreeNode
         */
        OctreeId getParentID() const;

		/**
		* Gets the parent id for the given OctreeId
		*/		
		static OctreeId getParentID(const OctreeId& id);

        /**
         * Gets the BoundingBox for this OctreeNode
         */
        const osg::BoundingBoxd& getBoundingBox() const;
        osg::BoundingBoxd& getBoundingBox();

        /**
         *Sets the BoundingBox for this OctreeNode
         */
        void setBoundingBox(const osg::BoundingBoxd& boundingBox);        

        /**
        *Split this OctreeNode into it's 8 children
        */
        void split();
        
        /**
        *Gets whether this OctreeNode has been split
        */
        bool isSplit() const;    

        /**
        *Gets whether this OctreeNode is a leaf node
        */
        bool isLeaf() const;

        /**
        *Gets the list of points in this OctreeNode
        */
        const PointList& getPoints() const;
        PointList& getPoints();

        typedef std::vector< osg::ref_ptr< OctreeNode > > OctreeNodeList;

        /**
         *Gets the children of this OctreeNode
         */
        const OctreeNodeList getChildren() const { return _children; }

        /**
         * Creates the given child of the OctreeNode
         */
        OctreeNode* createChild(unsigned int childNumber);

        /**
         * Creates an octree node with the given id.  Assumes this is the root node.
         */
        OctreeNode* createChild(const OctreeId& id);

        double getWidth() const;
        double getHeight() const;
        double getDepth() const;

        OctreeId getID(const osg::Vec3d& point, unsigned int level) const;        

		unsigned int getDimensions(unsigned int level) const;      

		/**
		 * Clears points and frees up memory from this OctreeNode
		 */
		void clearPoints();

    protected:       

        PointList _points;
        OctreeId _id;
        
        OctreeNodeList _children;
        osg::BoundingBoxd _boundingBox;
        bool _split;
    };
}

#endif