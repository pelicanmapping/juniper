/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2017 Pelican Mapping
* Pelican Mapping CONFIDENTIAL
* Copyright (c) 2010-2017 [Pelican Mapping], All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains the property of Pelican Mapping. The intellectual and technical concepts contained
* herein are proprietary to Pelican Mapping and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
* from Pelican Mapping.  Access to the source code contained herein is hereby forbidden to anyone except current Pelican Mapping employees, managers or contractors who have executed
* Confidentiality and Non-disclosure agreements explicitly covering such access.
*
* The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
* information that is confidential and/or proprietary, and is a trade secret, of Pelican Mapping.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
* OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF PELICAN MAPPING IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
* LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
* TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
*/
#ifndef OSGJUNIPER_IBR_CAMERANODE
#define OSGJUNIPER_IBR_CAMERANODE 1

#include "Common"
#include <osg/MatrixTransform>
#include <osg/Geometry>
#include <osg/Geode>
#include <osg/Material>
#include <osgJuniper/IBR>

#include <osgEarth/TaskService>



namespace osgJuniper
{
    /**
     * A decorator that organizes the IBR scene.  You can add IBRCameraNodes to it.
     */
    class OSGJUNIPER_EXPORT IBRScene : public osg::Group
    {
    public:
        IBRScene();

        osgEarth::TaskService* getTaskService() { return _taskService.get(); }

    private:
        osg::ref_ptr< osgEarth::TaskService > _taskService;
    };


    //class LoadImageOperation : public osg::Operation
    struct LoadImageOperation : public osgEarth::TaskRequest
    {
    public:
        LoadImageOperation(const std::string& filename);
        virtual void operator() (osgEarth::ProgressCallback* progress);
        osg::ref_ptr< osg::Image > _image;
        std::string _filename;
    };

    /**
     *IBRCamera is used to render an IBR Camera with a frustum
     */
    class OSGJUNIPER_EXPORT IBRCameraNode : public osg::MatrixTransform
    {		
    public:
        IBRCameraNode();

        /**
         *Gets the opacity
         */
        float getOpacity() const;

        /**
         *Sets the opacity (0-1)
         */
        void setOpacity(float opacity);

        /**
         *Gets whether or not to show the frustum
         */
        bool getShowFrustum() const;

        /**
         *Sets whether or not to show the frustum
         */
        void setShowFrustum( bool showFrustum );

        /**
         *Gets the frustum color
         */
        const osg::Vec4f& getFrustumColor() const;

        /**
         *Sets the frustum color
         */
        void setFrustumColor( const osg::Vec4f& frustumColor);

        /**
         *Gets the scale of the frustum
         */
        float getScale() const;

        /**
         *Sets the scale of the frustum
         */
        void setScale(float scale);


        /**
         *Sets the camera to render
         */
        void setCamera(const IBRCamera& camera);

        /**
         *Gets the camera to render
         */
        const IBRCamera& getCamera() const;

        /**
         *Gets transform of depth model
         */
        osg::MatrixTransform* getTransform() { return _transform.get(); }

        /**
         *Create a geometry with the image of camera
         */
        osg::Geometry* createCameraGeom( const IBRCamera& camera, int imgWidth=0, int imgHeight=0, float scale=1.0f );

        virtual void traverse(osg::NodeVisitor &nv);

    private:
        float _opacity;
        bool  _showFrustum;
        osg::Vec4f _frustumColor;		
        float _scale;

        IBRCamera _camera;

        osg::ref_ptr<osg::Material> _material;

        osg::ref_ptr< osg::Geometry > _frustumGeometry;
        osg::ref_ptr< osg::Geode > _frustumGeode;

        osg::ref_ptr< osg::Geometry > _faceGeometry;
        osg::ref_ptr< osg::Geode > _faceGeode;
        osg::ref_ptr< osg::Node > _depthModel;
        osg::ref_ptr< osg::MatrixTransform > _transform;

        osg::Geometry* createFrustumGeometry( const IBRCamera& camera, int imgWidth=0, int imgHeight=0, float scale=1.0f );
        osg::Node* createCameraNode( const IBRCamera& camera );
        osg::Node* createCameraDepthGeom( const IBRCamera& camera, int imgWidth, int imgHeight);
        void redraw();

        osg::ref_ptr< LoadImageOperation > _loadImageOperation;

        bool _fullRes;

        osg::ref_ptr< osg::Image > _image;
        osg::ref_ptr< osg::Image > _thumbnail;

        osg::observer_ptr< IBRScene > _ibrScene;
    };

    typedef std::vector<osg::ref_ptr< osgJuniper::IBRCameraNode > > CameraList;

    /**
     * Finds cameras in a scene graph
     */
    struct OSGJUNIPER_EXPORT IBRCameraFinder : public osg::NodeVisitor
    {
        CameraList _cameraList;

        IBRCameraFinder() : osg::NodeVisitor(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN) {}
        void apply(osg::MatrixTransform& node) {
            IBRCameraNode* camNode = dynamic_cast<IBRCameraNode*>(&node);
            if (camNode)
            {
                _cameraList.push_back(camNode);
            }
            traverse(node);
        }
    };
}

#endif
