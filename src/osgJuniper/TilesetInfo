/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2017 Pelican Mapping
* Pelican Mapping CONFIDENTIAL
* Copyright (c) 2010-2017 [Pelican Mapping], All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains the property of Pelican Mapping. The intellectual and technical concepts contained
* herein are proprietary to Pelican Mapping and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
* from Pelican Mapping.  Access to the source code contained herein is hereby forbidden to anyone except current Pelican Mapping employees, managers or contractors who have executed
* Confidentiality and Non-disclosure agreements explicitly covering such access.
*
* The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
* information that is confidential and/or proprietary, and is a trade secret, of Pelican Mapping.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
* OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF PELICAN MAPPING IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
* LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
* TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
*/
#ifndef OSGJUNIPER_TILESETINFO
#define OSGJUNIPER_TILESETINFO 1

#include "Common"
#include <osg/BoundingBox>
#include <string>

namespace osgJuniper
{
	/**
	 * Information about a tileset
	 */
	class OSGJUNIPER_EXPORT TilesetInfo
	{
	public:
		TilesetInfo();

		TilesetInfo(const TilesetInfo& rhs);

		bool getAdditive() const;

		void setAdditive(bool additive);

		const osg::BoundingBoxd& getBounds() const;

		void setBounds(const osg::BoundingBoxd& bounds);

		const std::string& getDriver() const;
		void setDriver(const std::string& driver);

		const std::string& getPath() const;

		void setPath(const std::string& path);

		static TilesetInfo read(const std::string& filename);

		static void write(const TilesetInfo& info, const std::string& filename);

	protected:

		bool _additive;
		osg::BoundingBoxd _bounds;
		std::string _driver;
		std::string _path;
	};
} // namespace osgJuniper

#endif


