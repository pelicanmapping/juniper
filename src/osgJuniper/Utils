/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2017 Pelican Mapping
* Pelican Mapping CONFIDENTIAL
* Copyright (c) 2010-2017 [Pelican Mapping], All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains the property of Pelican Mapping. The intellectual and technical concepts contained
* herein are proprietary to Pelican Mapping and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
* from Pelican Mapping.  Access to the source code contained herein is hereby forbidden to anyone except current Pelican Mapping employees, managers or contractors who have executed
* Confidentiality and Non-disclosure agreements explicitly covering such access.
*
* The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
* information that is confidential and/or proprietary, and is a trade secret, of Pelican Mapping.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
* OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF PELICAN MAPPING IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
* LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
* TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
*/
#ifndef OSGJUNIPER_UTILS_H
#define OSGJUNIPER_UTILS_H 1

#include <osgJuniper/Common>
#include <osg/Image>
#include <osg/NodeVisitor>


namespace osgJuniper
{
    class OSGJUNIPER_EXPORT FindNamedNodeVisitor : public osg::NodeVisitor
    {
    public:
        FindNamedNodeVisitor(const std::string& name);
        virtual void apply(osg::Node& node);

        typedef std::vector< osg::ref_ptr<osg::Node> > NodeList;
        std::string _name;
        NodeList _foundNodes;
    };

    class OSGJUNIPER_EXPORT EnableVBOVisitor : public osg::NodeVisitor
    {
    public:
        EnableVBOVisitor();
        virtual void apply(osg::Geode& geode);
    };


    class OSGJUNIPER_EXPORT Utils
    {
    public:
        static osg::Image* resizeImage( const osg::Image* input, unsigned int new_s, unsigned int new_t );
        static osg::Vec4 randomColor();
        static osg::Vec3 randomVert();
        static std::vector< std::string > getFilesFromDirectory(const std::string& directory, const std::string &ext = "");        
        static osg::Node* findNamedNode(osg::Node* node, const std::string& name);
        static void optimizeMesh( osg::Node* node );
        static std::string toLower( const std::string& str );
		static std::vector< std::string > glob(const std::string& pathname);
    };

}

#endif // OSGJUNIPER_UTILS_H
