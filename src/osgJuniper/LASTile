/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2017 Pelican Mapping
* Pelican Mapping CONFIDENTIAL
* Copyright (c) 2010-2017 [Pelican Mapping], All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains the property of Pelican Mapping. The intellectual and technical concepts contained
* herein are proprietary to Pelican Mapping and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
* from Pelican Mapping.  Access to the source code contained herein is hereby forbidden to anyone except current Pelican Mapping employees, managers or contractors who have executed
* Confidentiality and Non-disclosure agreements explicitly covering such access.
*
* The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
* information that is confidential and/or proprietary, and is a trade secret, of Pelican Mapping.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
* OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF PELICAN MAPPING IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
* LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
* TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
*/
#ifndef OSGJUNIPER_LASTILE
#define OSGJUNIPER_LASTILE 1

#include <osgJuniper/Common>
#include <osgEarth/SpatialReference>
#include <osgJuniper/Octree>
#include <osg/Referenced>
#include <osg/OperationThread>

#include <pdal/StageFactory.hpp>
#include <pdal/PipelineManager.hpp>

#include <osgJuniper/PointReaderWriter>

#include <memory>

namespace osgJuniper
{
	using namespace std;
    class OSGJUNIPER_EXPORT Progress : public osg::Referenced
    {
    public:
        Progress();

        unsigned int getTotal();

        void setTotal(unsigned int total);

        unsigned int getComplete();

        bool isComplete();

        void incrementComplete(unsigned int complete);

        float getPercentComplete();

    private:
        unsigned int _total;
        unsigned int _complete;
        OpenThreads::Mutex _mutex;
    };



    /**
    * Class used to build the output of an octree from a series of input files.
    */
    class OSGJUNIPER_EXPORT OctreeCellBuilder : public osg::Referenced
    {
    public:
        OctreeCellBuilder();

        ~OctreeCellBuilder();

        unsigned int getNumPoints() const;

        OctreeNode* getNode() const;

        void setNode( OctreeNode *node );

        unsigned int getInnerLevel() const;

        void setInnerLevel(unsigned int innerLevel);

        unsigned int getMaxLevel() const;

        void setMaxLevel(unsigned int maxLevel);

        std::vector<std::string>& getInputFiles();

        std::vector<std::string>& getOutputFiles();

        bool getDeleteInputs() const;

        void setDeleteInputs(bool deleteInputs);

        unsigned int getTargetNumPoints() const;

        void setTargetNumPoints(unsigned int targetNumPoints);

        osgEarth::SpatialReference* getSourceSRS() const;
        void setSourceSRS( osgEarth::SpatialReference* srs);

        osgEarth::SpatialReference* getDestSRS() const;
        void setDestSRS( osgEarth::SpatialReference* srs);

        bool getGeocentric() const;
        void setGeocentric(bool geocentric);

        void buildRoot(unsigned int numThreads);

        void build();
        void buildChildren();

		void initReader();

        void closeReader();
      
		std::shared_ptr<PointWriter> getOrCreateWriter(const osg::Vec3d& location);

        float getFraction() const;
        void setFraction(float fraction);

        bool keep();

        void closeChildWriters();

        unsigned int getPointsInCell(const OctreeId& id);

        void incrementPointsInCell(const OctreeId& id, unsigned int count=1);

        void deleteInputs();

        osg::Vec3d reprojectPoint(const osg::Vec3d& input);

        std::string getFilename(OctreeId id, const std::string& ext) const;

        osg::OperationQueue* getOperationQueue() const;
        void setOperationQueue(osg::OperationQueue* queue);

        void initThreads(unsigned int count);

        Progress* getProgress() const;
        void setProgress(Progress* progress);

    private:
        void computeMetaData();

		pdal::Stage* createStageForFile(const std::string& filename);

		pdal::Stage* _readerStage;

		std::vector< std::shared_ptr< PipelineManager > > _pipelines;

        osg::ref_ptr< OctreeNode > _node;
        unsigned int _innerLevel;
        unsigned int _maxLevel;
        unsigned int _targetNumPoints;

        std::vector<std::string> _inputFiles;
        std::vector<std::string> _outputFiles;

        typedef std::map<OctreeId, unsigned int> CellCount;
        CellCount _cellCount;
        
		unsigned int _numPoints;
		unsigned int _totalNumPoints;

		osg::BoundingBoxd _bounds;

        std::vector< std::shared_ptr< PointWriter> > _childWriters;
        std::vector< osg::ref_ptr<OctreeNode> > _children;

        bool _deleteInputs;

        float _fraction;

        osg::ref_ptr< osgEarth::SpatialReference > _srcSRS;
        osg::ref_ptr< osgEarth::SpatialReference > _destSRS;
        bool _geocentric;

        osg::ref_ptr< osg::OperationQueue > _queue;
        std::vector< osg::ref_ptr< osg::OperationsThread > > _threads;

        osg::ref_ptr< Progress > _progress;		
    };
}


#endif

