/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2017 Pelican Mapping
* Pelican Mapping CONFIDENTIAL
* Copyright (c) 2010-2017 [Pelican Mapping], All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains the property of Pelican Mapping. The intellectual and technical concepts contained
* herein are proprietary to Pelican Mapping and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
* from Pelican Mapping.  Access to the source code contained herein is hereby forbidden to anyone except current Pelican Mapping employees, managers or contractors who have executed
* Confidentiality and Non-disclosure agreements explicitly covering such access.
*
* The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
* information that is confidential and/or proprietary, and is a trade secret, of Pelican Mapping.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
* OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF PELICAN MAPPING IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
* LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
* TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
*/
#ifndef OSGJUNIPER_IBR
#define OSGJUNIPER_IBR 1

#include "Common"
#include <osg/Shape>
#include <osg/Geometry>
#include <map>

namespace osgJuniper
{

	struct OSGJUNIPER_EXPORT IBRCamera
	{
		IBRCamera():
	      _selected(false)
		{
		}

		int           _id;
		double        _focalLength;  // camera's focal length, in pixels.
		double        _k1, _k2;      // two radial distortion correction coefficients
		osg::Matrixd  _rot;
		osg::Vec3d    _trans;        // translation

		std::string _imageUri;
		std::string _depthModelUri;
		osg::ref_ptr<osg::Image> _image;
		bool _selected;

		osg::Vec3d worldToCamera( const osg::Vec3d& X ) const
		{
			// untested
			osg::Vec3d P = _rot * X + _trans;
			osg::Vec3d p = -P / P.z();
			return p * r(p) * _focalLength;
		}

		osg::Matrixd getWorldMatrix() const
		{
			// tested, working
			osg::Matrixd rot_i;
			rot_i.invert( _rot );
			osg::Matrixd result = _rot *
				osg::Matrixd::translate( rot_i * -_trans );
			return result;
		}

    const std::string& getDepthModelUri() const { return _depthModelUri; }
    const std::string& getImageUri() const { return _imageUri; }

	private:
		double r(const osg::Vec3d& p) const
		{
			double plen2 = p.length2();
			return 1.0 + _k1 * plen2 + _k2 * plen2 * plen2;
		}
	};
	typedef std::vector<IBRCamera> IBRCameraList;

	struct OSGJUNIPER_EXPORT IBRPointView
	{
		int _cameraIndex;   // index into camera list
		int _key;           // index of SIFT keypoint where point was detected
		float _x, _y;       // pixel position in image (0,0 is the center)
	};

	struct OSGJUNIPER_EXPORT IBRPoint
	{
		osg::Vec3d  _position;
		osg::Vec4ub _color;
		std::vector<IBRPointView> _views;
	};
	typedef std::vector<IBRPoint> IBRPointList;

	struct OSGJUNIPER_EXPORT IBRModel : public osg::Referenced
	{
		IBRCameraList _cameras;
		IBRPointList _points;
	};
}

#endif
