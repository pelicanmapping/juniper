/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2017 Pelican Mapping
* Pelican Mapping CONFIDENTIAL
* Copyright (c) 2010-2017 [Pelican Mapping], All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains the property of Pelican Mapping. The intellectual and technical concepts contained
* herein are proprietary to Pelican Mapping and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
* from Pelican Mapping.  Access to the source code contained herein is hereby forbidden to anyone except current Pelican Mapping employees, managers or contractors who have executed
* Confidentiality and Non-disclosure agreements explicitly covering such access.
*
* The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
* information that is confidential and/or proprietary, and is a trade secret, of Pelican Mapping.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
* OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF PELICAN MAPPING IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
* LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
* TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
*/

#ifndef OSGJUNIPER_NODESEQUENCE
#define OSGJUNIPER_NODESEQUENCE 1

#include <osg/Group>

#include <osgJuniper/Common>

namespace osgJuniper
{
    class OSGJUNIPER_EXPORT NodeSequence : public osg::Group
    {
    public:
        NodeSequence();

        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        NodeSequence(const NodeSequence&, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);

        META_Node(osgJuniper, NodeSequence);

        virtual void traverse(osg::NodeVisitor& nv);

        /**
         * Adds a file to the end of the filenames list
         */
        void addFile(const std::string& filename);

        /**
         * Gets the filename at position i
         */
        std::string getFilename(unsigned int i) const;

        /**
         * Gets the number of filenames in this NodeSequence
         */
        unsigned int getNumFilenames() const;

        /**
         * Sets the active frame index
         */
        void setActive(int index);

        /**
         * Gets the active frame index
         */
        int getActive() const;

        /**
         * Seeks the active frame index by the given offset.  Positive moves forward, negative moves backwards
         */
        void seek(int offset);

        /**
         *Gets the read ahead buffer size
         */
        unsigned int getBufferSize() const;

        /**
         * Sets the read ahead buffer size
         */
        void setBufferSize(unsigned int bufferSize);


    protected:

        typedef std::vector< osg::ref_ptr< osg::Group > > GroupList;
        GroupList _groups;

        int _bufferStartIndex;
        int _bufferEndIndex;
        unsigned int _bufferSize;
        
        typedef std::vector< std::string > FileNameList;
        FileNameList _filenames;

        typedef std::vector< osg::ref_ptr< osg::Referenced > > DatabaseRequestList;
        DatabaseRequestList _requests;

        int _activeIndex;

        double _length;
    };
}

#endif