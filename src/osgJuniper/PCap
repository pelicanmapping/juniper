/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2017 Pelican Mapping
* Pelican Mapping CONFIDENTIAL
* Copyright (c) 2010-2017 [Pelican Mapping], All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains the property of Pelican Mapping. The intellectual and technical concepts contained
* herein are proprietary to Pelican Mapping and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
* from Pelican Mapping.  Access to the source code contained herein is hereby forbidden to anyone except current Pelican Mapping employees, managers or contractors who have executed
* Confidentiality and Non-disclosure agreements explicitly covering such access.
*
* The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
* information that is confidential and/or proprietary, and is a trade secret, of Pelican Mapping.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
* OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF PELICAN MAPPING IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
* LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
* TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
*/
#ifndef OSGJUNIPER_PCAP
#define OSGJUNIPER_PCAP 1

#include <osgJuniper/Common>
#include <iostream>
#include <fstream>


/* Following definitions taken from the Wireshark Libpcap File Format
* page at http://wiki.wireshark.org/Development/LibpcapFileFormat.
*/

typedef unsigned int    guint32;
typedef int				gint32;
typedef unsigned short  guint16;
typedef short int		gint16;
typedef unsigned char	guint8;
typedef unsigned int	guint;
typedef unsigned char   guchar;


/** Global header for the pcap file. */
#define MAGIC_NUMBER_NOSWAP	0xa1b2c3d4	// File format and native reader use same byte-swapping format
#define MAGIC_NUMBER_SWAP	0xd4c3b2a1	// File format and native reader use opposite byte-swapping formats

typedef struct pcap_hdr_s {
    guint32 magic_number;   /* magic number */
    guint16 version_major;  /* major version number */
    guint16 version_minor;  /* minor version number */
    gint32  thiszone;       /* GMT to local correction */
    guint32 sigfigs;        /* accuracy of timestamps */
    guint32 snaplen;        /* max length of captured packets, in octets */
    guint32 network;        /* data link type */
} pcap_hdr_t;

typedef struct pcaprec_hdr_s {
    guint32 ts_sec;         /* timestamp, seconds since January 1, 1970 00:00:00 GMT*/
    guint32 ts_usec;        /* timestamp microseconds, should be less than 1,000,000 */
    guint32 incl_len;       /* number of octets of packet saved in file */
    guint32 orig_len;       /* actual length of packet */
} pcaprec_hdr_t;

// Define the maximum packet length. This should really be the maximum size of
// an Ethernet packet which is 1518, but we're lazy...
#define MAX_PACKET_LENGTH	65536

typedef struct __PACKET__ {
    __int64		timestamp;
    guint32		nBytes;
    char		Bytes[MAX_PACKET_LENGTH];
} PACKET;   

namespace osgJuniper
{
    class OSGJUNIPER_EXPORT PcapReader
    {
    public:
        PcapReader( const std::string& filename );
        bool hasMore() const;
        bool nextPacket(PACKET& packet);

        /**
         *Gets the file size in bytes of this pcap file
         */
        unsigned int getFileSize() const;

        /**
         *Resets reading back to the first packet
         */
        void reset();

    private:
        std::string _filename;       
        std::ifstream _in;
        unsigned int _filesize;
        pcap_hdr_t _header;

    };
}

#endif