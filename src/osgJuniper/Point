/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2017 Pelican Mapping
* Pelican Mapping CONFIDENTIAL
* Copyright (c) 2010-2017 [Pelican Mapping], All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains the property of Pelican Mapping. The intellectual and technical concepts contained
* herein are proprietary to Pelican Mapping and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
* from Pelican Mapping.  Access to the source code contained herein is hereby forbidden to anyone except current Pelican Mapping employees, managers or contractors who have executed
* Confidentiality and Non-disclosure agreements explicitly covering such access.
*
* The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
* information that is confidential and/or proprietary, and is a trade secret, of Pelican Mapping.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
* OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF PELICAN MAPPING IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
* LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
* TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
*/

#ifndef OSGJUNIPER_POINT
#define OSGJUNIPER_POINT 1

#include <osgJuniper/Common>
#include <osg/Object>
#include <osg/Vec3>
#include <osg/Vec4>
#include <osg/BoundingBox>
#include <osg/Version>
#include <osgDB/ReaderWriter>


#include <vector>
#include <list>

namespace osgJuniper
{
    /**
     * A simple point
     */
    class OSGJUNIPER_EXPORT Point
    {
    public:
        Point();        

		double x;
		double y;
		double z;

		unsigned short r;
		unsigned short g;
		unsigned short b;
		unsigned short a;

		unsigned short intensity;
		unsigned char classification;
		unsigned char returnNumber;       

		float normalX;
		float normalY;
		float normalZ;

		static void write(std::ostream &out, const std::vector< Point >& points);
		static void read(std::istream &in, std::vector< Point >& points);
    };

	typedef std::vector< Point > PointList;
	    

    /**
     * A cursor that lets you iterate over points from a PointSource
     */
    class OSGJUNIPER_EXPORT PointCursor : public osg::Referenced
    {
    public:        
        virtual bool nextPoint(Point& point) = 0;
    };

    /**
     * A datasource that provides points
     */
    class OSGJUNIPER_EXPORT PointSource : public virtual osg::Object
    {
    public:
        virtual osg::Object* cloneType() const { return 0; } // cloneType() not appropriate
        virtual osg::Object* clone(const osg::CopyOp&) const { return 0; } // clone() not appropriate
        virtual bool isSameKindAs(const osg::Object* obj) const { return dynamic_cast<const PointSource*>(obj)!=NULL; }
        virtual const char* className() const { return "PointSource"; }
        virtual const char* libraryName() const { return "osgJuniper"; }

        /**
         *Creates a point cursor for reading points from this PointSource 
         */
        virtual PointCursor* createPointCursor() = 0;
        
        /**
         *Loads a point source from the given filename
         */
        static PointSource* loadPointSource(const std::string& filename, const osgDB::ReaderWriter::Options* options=0);
    };

    typedef std::vector< osg::ref_ptr< PointSource > > PointSourceList;


    /**
     * A simple cursor that iterates over points in a PointLists
     */
    class OSGJUNIPER_EXPORT PointListCursor : public PointCursor
    {
    public:
        PointListCursor(PointList& points);
        virtual bool nextPoint(Point& point);
    protected:
        PointList& _points;
        PointList::iterator _itr;
        unsigned int _numRead;
    };

    /**
     * A simple PointSource that provides points from a PointLists
     */
    class OSGJUNIPER_EXPORT PointListSource : public PointSource
    {
    public:
        PointListSource();
        PointListSource(PointList points);
        virtual PointCursor* createPointCursor();

        PointList& getPoints() { return _points; }
        
    protected:
        PointList _points;
    };

    /**
     * A PointCursor that returns points from a CompositePointSources
     */
    class OSGJUNIPER_EXPORT CompositePointSourceCursor : public PointCursor
    {
    public:
        CompositePointSourceCursor(PointSourceList& pointSources);

        virtual bool nextPoint(Point& point);

        PointSourceList& _pointSources;
        osg::ref_ptr< PointCursor > _currentCursor;

        PointSourceList::iterator _iter;
        unsigned int _numRead;
    };


    /**
     * A PointSource that combines multiple point sources and makes them behave as a single source
     */    
    class OSGJUNIPER_EXPORT CompositePointSource : public PointSource
    {
    public:

        CompositePointSource();
        CompositePointSource( const std::vector< std::string > &filenames );
        virtual PointCursor* createPointCursor();
        void addPointSource(PointSource* pointSource);              
        void addPointSource(const std::string &filename);

        PointSourceList _pointSources;

    };
}

#endif