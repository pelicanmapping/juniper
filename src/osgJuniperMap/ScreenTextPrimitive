/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2011 Pelican Ventures, Inc.
* http://wush.net/trac/juniper
*
* osgJuniper is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGJUNIPERMAP_SCREENTEXTPRIMITIVE_H
#define OSGJUNIPERMAP_SCREENTEXTPRIMITIVE_H 1

#include <osgJuniperMap/Common>
#include <osgJuniperMap/Primitive>
#include <osg/MatrixTransform>
#include <osgText/Text>

namespace osgJuniper { namespace Map {


    class OSGJUNIPERMAP_EXPORT ScreenTextPrimitive : public Primitive
    {
    public:
        ScreenTextPrimitive(PrimitiveId id);

        virtual const char* className() const { return "ScreenTextPrimitive"; } 


        virtual PrimitiveType getPrimitiveType() const { return TYPE_SCREEN;}

        const osg::Vec2& getPosition() const;
        void setPosition( const osg::Vec2& position );                                        

        const std::string& getText() const;
        void setText( const std::string& text );

        const std::string& getFont() const;
        void setFont( const std::string& font);

        void setForegroundColor( const osg::Vec4& color );
        const osg::Vec4& getForegroundColor() const;

        void setBackgroundColor( const osg::Vec4& color );
        const osg::Vec4& getBackgroundColor() const;

        float getRotation() const;
        void setRotation(float rotation);

        float getSize() const;
        void setSize( float size);

        float getAlpha() const;
        void setAlpha(float alpha);

        osgText::Text* getTextDrawable() { return _drawable.get(); }

        virtual void setProperty(const std::string& name, const osg::Vec3d& value);
        virtual void setProperty(const std::string& name, int    value);
        virtual void setProperty(const std::string& name, const std::string& value);
        virtual void setProperty(const std::string& name, double value);

        virtual void setProperty(const std::string& name, const std::vector< osg::Vec3 > value) {}
        virtual void setProperty(const std::string& name, const std::vector< int > value) {}

    protected:

        void updateTransform();

        ~ScreenTextPrimitive();
        osg::Vec2 _position;        

        osg::Vec4 _fgColor;
        osg::Vec4 _bgColor;
        float _alpha;
        std::string _text;
        std::string _font;
        float _rotation;
        float _size;

        osg::ref_ptr< osg::MatrixTransform > _transform;
        osg::ref_ptr< osgText::Text > _drawable;
        osg::ref_ptr< osg::Geode > _geode;
    };


}}
#endif