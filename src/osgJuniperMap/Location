/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2011 Pelican Ventures, Inc.
* http://wush.net/trac/juniper
*
* osgJuniper is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGJUNIPERMAP_LOCATION_H
#define OSGJUNIPERMAP_LOCATION_H 1

#include <osgJuniperMap/Common>
#include <osg/CoordinateSystemNode>

namespace osgJuniper { namespace Map {


    struct OSGJUNIPERMAP_EXPORT Location
    {
    public:
        Location();
        Location(double latitude, double longitude, double altitude);        
        Location(const Location& rhs);

        double getLatitude()  const;
        double getLatitudeRad() const { return osg::DegreesToRadians( _latitude ); }
        double getLongitude() const;
        double getLongitudeRad() const { return osg::DegreesToRadians( _longitude); };
        double getAltitude()  const;

        osg::Vec3d asVec3d() const;

        bool operator == (const Location& rhs) const        
        {
            return (_latitude     == rhs._latitude)   &&
                (_longitude    == rhs._longitude) &&
                (_altitude     == rhs._altitude);
        }

        bool operator != (const Location& rhs) const        
        {
            return (_latitude     != rhs._latitude)   ||
                (_longitude    != rhs._longitude) ||
                (_altitude     != rhs._altitude);
        }

        void getGeocentric(const osg::EllipsoidModel* em, osg::Vec3d& position)
        {
            return em->convertLatLongHeightToXYZ( osg::DegreesToRadians( _latitude ), osg::DegreesToRadians( _longitude ), _altitude,
                position.x(), position.y(), position.z());
        }     

    protected:
        double _latitude;
        double _longitude;
        double _altitude;
    };

    typedef std::vector<Location> LocationList;


}}
#endif