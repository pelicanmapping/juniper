/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2011 Pelican Ventures, Inc.
* http://wush.net/trac/juniper
*
* osgJuniper is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGJUNIPERMAP_MODELPRIMITIVE_H
#define OSGJUNIPERMAP_MODELPRIMITIVE_H 1

#include <osgJuniperMap/Common>
#include <osgJuniperMap/Primitive>
#include <osg/MatrixTransform>
#include <osgText/Text>

namespace osgJuniper { namespace Map {

    using namespace osgEarth;

    class OSGJUNIPERMAP_EXPORT ModelPrimitive : public Primitive
    {
    public:
        ModelPrimitive(PrimitiveId id);

        virtual const char* className() const { return "ModelPrimitive"; } 

        const Location& getLocation() const;
        void setLocation(const Location& location);

        osg::Node* getModel() const;

        AltitudeMode getAltitudeMode() const;
        void setAltitudeMode(AltitudeMode altitudeMode);

        virtual void setMapContext(MapContext* context);

        bool getOrientToGround() const;
        void setOrientToGround(bool orientToGround);

        const std::string& getFilename() const;
        void setFilename(const std::string& filename);

        const osg::Vec3d& getScale() const;
        void setScale(const osg::Vec3d& scale);
        void setScale(double x, double y, double z);

        double getHeading() const { return _heading; }
        double getPitch() const { return _pitch; }
        double getRoll() const { return _roll;}

        void setHeading( double heading );
        void setPitch( double pitch );
        void setRoll( double roll );
        void setRotation(double heading, double pitch, double roll);

        virtual void setEnableClusterCulling(bool enableClusterCulling);

        virtual void terrainChanged(const osgEarth::TileKey& tileKey, osg::Node* terrain);

        virtual void setProperty(const std::string& name, const std::string& value);
        virtual void setProperty(const std::string& name, double value);
        virtual void setProperty(const std::string& name, const osg::Vec3d& value);
        virtual void setProperty(const std::string& name, bool value);
        virtual void setProperty(const std::string& name, int value);

    protected:
        virtual void init();
        void updateTransform(osg::Node* terrain=0);

        std::string _filename;
        osg::ref_ptr< osg::Node > _model;
        osg::ref_ptr< osg::MatrixTransform > _transform;

        osg::Vec3d _scale;
        Location _location;
        AltitudeMode _altitudeMode;
        bool _orientToGround;
        double _heading;
        double _pitch;
        double _roll;
        bool _locationSet;
    };


}}
#endif