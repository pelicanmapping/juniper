/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2011 Pelican Ventures, Inc.
* http://wush.net/trac/juniper
*
* osgJuniper is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGJUNIPERMAP_SCREENPOLYLINEPRIMITIVE_H
#define OSGJUNIPERMAP_SCREENPOLYLINEPRIMITIVE_H 1

#include <osgJuniperMap/Common>
#include <osgJuniperMap/Primitive>
#include <osg/MatrixTransform>
#include <osg/LineWidth>

namespace osgJuniper { namespace Map {


    class OSGJUNIPERMAP_EXPORT ScreenPolylinePrimitive : public Primitive
    {
    public:
        ScreenPolylinePrimitive(PrimitiveId id);

        virtual const char* className() const { return "ScreenPolylinePrimitive"; } 


        virtual PrimitiveType getPrimitiveType() const { return TYPE_SCREEN;}

        //const osg::Vec2Array& getPoints() const;                                      

        enum LineStyle
        {
            LINESTYLE_SOLID      = 0,
            LINESTYLE_DASH       = 0x00FF,
            LINESTYLE_DOT        = 0x0F0F,
            LINESTYLE_DASHDOT    = 0x060F,
            LINESTYLE_DASHDOTDOT = 0x18CF
        };

        void setLineStyle(LineStyle style);
        LineStyle getLineStyle() const;

		void setLineWidth(float lineWidth);
        float getLineWidth() const;

        void setColor(osg::Vec4& color);
        osg::Vec4& getColor() const;

		float getAlpha() const;
        void setAlpha(float alpha);

        virtual void setProperty(const std::string& name, const osg::Vec3d& value);
		virtual void setProperty(const std::string& name, std::vector< osg::Vec2 > value);
        virtual void setProperty(const std::string& name, int    value);
        virtual void setProperty(const std::string& name, const std::string& value);
        virtual void setProperty(const std::string& name, double value);

        virtual void setProperty(const std::string& name, const std::vector< osg::Vec3 > value) {}
        virtual void setProperty(const std::string& name, const std::vector< int > value) {}

    protected:

        void updateTransform();

        ~ScreenPolylinePrimitive();

		osg::ref_ptr< osg::Vec2Array > _points;
        osg::ref_ptr< osg::Geode > _geode;
		osg::ref_ptr< osg::Geometry > _geometry;
		osg::ref_ptr< osg::Vec4Array > _color;
		osg::ref_ptr< osg::LineWidth > _lineWidth;

		LineStyle _lineStyle;
		float _alpha;
    };


}}
#endif
