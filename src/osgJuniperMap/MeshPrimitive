/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2011 Pelican Ventures, Inc.
* http://wush.net/trac/juniper
*
* osgJuniper is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGJUNIPERMAP_MESHPRIMITIVE_H
#define OSGJUNIPERMAP_MESHPRIMITIVE_H 1

#include <osgJuniperMap/Common>
#include <osgJuniperMap/ModelPrimitive>
#include <osg/MatrixTransform>
#include <osg/Geometry>
#include <osg/Geode>

namespace osgJuniper { namespace Map {


    class OSGJUNIPERMAP_EXPORT MeshPrimitive : public ModelPrimitive
    {
    public:
        MeshPrimitive(PrimitiveId id);

        virtual const char* className() const { return "MeshPrimitive"; } 

        const std::vector< osg::Vec4 >& getColors() const;
        void setColors( const std::vector< osg::Vec4 > &colors );

        const std::vector< osg::Vec3 >& getVerts() const;
        void setVerts( const std::vector< osg::Vec3 > &verts );

        const std::vector< osg::Vec2 >& getTexCoords() const;
        void setTexCoords( const std::vector< osg::Vec2 > &texCoords);

        void setTexCoords( const std::vector< osg::Vec3 > &texCoords );

        const std::vector< int >&getIndices() const;
        void setIndices( const std::vector< int > &indices);

        GLenum getMode() const;
        void setMode(GLenum mode);

        const osg::Vec4f& getColor() const;
        void setColor(const osg::Vec4f& color);

        osg::Image* getImage() const;
        void setImage( osg::Image* image );

        virtual void setProperty(const std::string& name, int    value);        
        virtual void setProperty(const std::string& name, bool    value);        
        virtual void setProperty(const std::string& name, const osg::Vec3d& value);
        virtual void setProperty(const std::string& name, const std::vector< osg::Vec3 >& value);
        virtual void setProperty(const std::string& name, const std::vector< int >& value);
        
    protected:

        virtual void init();

        ~MeshPrimitive();

        osg::Vec4f _color;

        osg::ref_ptr< osg::Geometry > _geometry;
        osg::ref_ptr< osg::Geode > _geode;

        std::vector< osg::Vec2 > _texCoords;
        std::vector< osg::Vec3 > _verts;
        std::vector< osg::Vec4 > _colors;

        std::vector< int > _indices;

        osg::ref_ptr< osg::PrimitiveSet > _primitiveSet;

        osg::ref_ptr< osg::Image > _image;

        GLenum _mode;
    };


}}
#endif