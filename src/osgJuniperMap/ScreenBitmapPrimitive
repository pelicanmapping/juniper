/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2011 Pelican Ventures, Inc.
* http://wush.net/trac/juniper
*
* osgJuniper is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGJUNIPERMAP_SCREENBITMAPPRIMITIVE_H
#define OSGJUNIPERMAP_SCREENBITMAPPRIMITIVE_H 1

#include <osgJuniperMap/Common>
#include <osgJuniperMap/Primitive>
#include <osg/MatrixTransform>

namespace osgJuniper { namespace Map {

    class OSGJUNIPERMAP_EXPORT ScreenBitmapPrimitive : public Primitive
    {
    public:
        ScreenBitmapPrimitive(PrimitiveId id);

        virtual const char* className() const { return "ScreenBitmapPrimitive"; } 

        const osg::Vec2& getPosition() const;
        void setPosition( const osg::Vec2& position );                

        void setForegroundColor( const osg::Vec4& color );
        const osg::Vec4& getForegroundColor() const;

        void setBackgroundColor( const osg::Vec4& color );
        const osg::Vec4& getBackgroundColor() const;

        virtual PrimitiveType getPrimitiveType() const { return TYPE_SCREEN;}

        void setSize(float w, float h);
        float getWidth() const;
        float getHeight() const;

        const std::string& getFilename() const;
        void setFilename(const std::string& filename);

        osg::Image* getImage() const;
        void setImage( osg::Image* image );

        float getRotation() const;
        void setRotation( float rotation);

        virtual void setProperty(const std::string& name, double value);
        virtual void setProperty(const std::string& name, const osg::Vec3& value);
        virtual void setProperty(const std::string& name, int value);
        virtual void setProperty(const std::string& name, const std::string& value);		

    protected:

        void init();

        void updateTransform();
        void updateRotation();
		void changeColor(osg::Vec4Array* colors);

        osg::Vec2f _position;

        osg::Vec4 _fgColor;
        osg::Vec4 _bgColor;
        float _alpha;
        std::string _filename;
        float _rotation;

        osg::ref_ptr< osg::Image > _image;

        float _width;
        float _height;

        osg::ref_ptr< osg::MatrixTransform > _transform;
    };


}}
#endif