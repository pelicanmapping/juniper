/* -*-c++-*- */
/* osgJuniper - Large Dataset Visualization Toolkit for OpenSceneGraph
* Copyright 2010-2011 Pelican Ventures, Inc.
* http://wush.net/trac/juniper
*
* osgJuniper is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGJUNIPERMAP_ELLIPSOIDPRIMITIVE_H
#define OSGJUNIPERMAP_ELLIPSOIDPRIMITIVE_H 1

#include <osgJuniperMap/Common>
#include <osgJuniperMap/Primitive>
#include <osg/MatrixTransform>
#include <osg/Geometry>
#include <osg/Geode>

namespace osgJuniper { namespace Map {

    using namespace osgEarth;

    class OSGJUNIPERMAP_EXPORT EllipsoidPrimitive : public Primitive
    {
    public:
        EllipsoidPrimitive(PrimitiveId id);

        virtual const char* className() const { return "EllipsoidPrimitive"; } 

        const Location& getLocation() const;
        void setLocation(const Location& location);

        AltitudeMode getAltitudeMode() const;
        void setAltitudeMode(AltitudeMode altitudeMode);

        virtual void setMapContext(MapContext* Context);        

        void setFillColor( const osg::Vec4& color);                        
        const osg::Vec4& getFillColor() const;

        void setOutlineColor( const osg::Vec4& color);
        const osg::Vec4& getOutlineColor() const;

        void setSize(const osg::Vec3d& size);
        const osg::Vec3d& getSize() const;

        void setShowOutline( bool showOutline );
        bool getShowOutline() const;

        void setShowFill( bool showFill );
        bool getShowFill() const;

        virtual void terrainChanged(const osgEarth::TileKey& tileKey, osg::Node* terrain);

        virtual void setProperty(const std::string& name, int value);
        virtual void setProperty(const std::string& name, double value);
        virtual void setProperty(const std::string& name, bool value);
        virtual void setProperty(const std::string& name, const osg::Vec3d& value);
		virtual void setProperty(const std::string& name, const LocationList& locations);

        
    protected:

        void updateTransform(osg::Node* terrain = 0);
        void updateStyle();

        ~EllipsoidPrimitive();
        Location _location;
        AltitudeMode _altitudeMode;        
        osg::Vec4 _fillColor;
        osg::Vec4 _outlineColor;
        osg::Vec3d _size;

        osg::ref_ptr< osg::MatrixTransform > _transform;
        osg::ref_ptr< osg::Drawable>  _fillDrawable;
        osg::ref_ptr< osg::Drawable > _outlineDrawable;
        osg::ref_ptr< osg::Geode > _fillGeode;
        osg::ref_ptr< osg::Geode > _outlineGeode;

        bool _showOutline;
        bool _showFill;
    };


}}
#endif